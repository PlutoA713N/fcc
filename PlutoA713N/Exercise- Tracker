const express = require('express')
const app = express()
const cors = require('cors')
require('dotenv').config()
const mongoose = require('mongoose');

app.use(cors())
app.use(express.static('public'))
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});

// Connection to DataBase
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser : true,
  useUnifiedTopology: true
});

const userSchema = new mongoose.Schema({
  username: String
});

const User = new mongoose.model('User', userSchema);

const exerciseSchema = new mongoose.Schema({
	userId: String,
	username: String,
	description: { type: String, required: true },
	duration: { type: Number, required: true },
	date: Date
});

const Exercise = new mongoose.model('Exercise', exerciseSchema);

const subLog = new mongoose.Schema({
  description:String,
  duration:Number,
  date:String
});

const logSchema = new mongoose.Schema({
  username: String,
  count: Number,
  _id: String,
  log: [subLog]
});

const Log = mongoose.model('Log', logSchema);

app.use(express.urlencoded({extended: false}));

// Post req to Create a User & Id in database
app.post('/api/users', (req,res) => {
  const people = new User({
    username : req.body.username
  })
  people.save();
  res.json({
    username: people.username,
    _id: people._id
           })
});

// To get a array of Saved Data from Database
app.get('/api/users', (req,res)=> {
  User.find({})
  .then(data => {
    res.json(data)
  })
  .catch(err => {
    console.error(err)
  })
});

// To add new exercises from one Models data to Another model 
app.post('/api/users/:_id/exercises', (req,res) => {
  const id = req.params._id;
  var {description, duration, date} = req.body;

  if(!date){
    date = new Date();
  }

  User.findById(id)
  .then(userData => {
   
    const exeObj = new Exercise({
      userId: id,
      username: userData.username,
      description: description,
      duration: duration,
      date: new Date(date).toDateString()
    })
      
    exeObj.save();
    res.json ({
      username: userData.username,
      description: description,
      duration: Number(duration),
      date: new Date(date).toDateString(),
      _id : id
    })
 })
 .catch(err => {
   console.log(err);
 })
  
});

// To merge two Schemas into a One Schema
app.get('/api/users/:_id/logs', async(req,res) => {
   var {from, to, limit} = req.query,
     id = req.params['_id'];

  from = from || new  Date(0).toISOString().slice(0,10);
  to = to || new Date(Date.now()).toISOString().slice(0,10);
  limit = limit || 0;

  console.log('from', from, 'to', to, 'limit',limit);

  // finding an User by their Id
  let user = await User.findById(id).exec();

 //  Finding the folks who matchs the criteria
  let filterData = await Exercise.find({
    userId: id,
    date: {$gte:from, $lte: to}
  })
  .select('description duration date')
  .limit(limit)
  .exec();
  
// Promise  in pending state

// Extract data from a filterData

  let exerciseData = filterData.map((data) => {
    return {
    description: data.description,
    duration: data.duration,
    date: new Date(data.date).toDateString()
        }
  });


  res.json({
    username: User.username,
      _id: id,
    count: exerciseData.length,
    log: exerciseData
  })
  
 console.log(filterData)
  

});


const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})
